# Test unicode strings in key and value contexts

%TestML 0.1.0

# Make a mapping { "$code" : "$code" } where code is a unicode code point:

# Dump mapping matches *yaml
*code.dump_code_key_value == *yaml

# Load *yaml then dump matches *yaml
*yaml.load_yaml.dump_yaml == *yaml

# Dump mapping the load memory-matches mapping
*code.code_key_value.dump_yaml.load_yaml === *code.code_key_value


# 0 → \0 "null"
#
# \z is the other YAML "null" encoding. Most implementations (including
# libyaml), seem to go with \0 when emitting.
=== Code point 0
--- code: 0
--- yaml
"\0": "\0"


# 1-6,14-27,29-31 → \x##
=== Code point 1
--- code: 1
--- yaml
"\x01": "\x01"


# 7 → \a "bell" (alarm)
=== Code point 7
--- code: 7
--- yaml
"\a": "\a"


# 8 → \b "backspace"
=== Code point 8
--- code: 8
--- yaml
"\b": "\b"


# 9 → \t "horizontal tab"
=== Code point 9
--- code: 9
--- yaml
"\t": "\t"


# 10 → \n "linefeed" (newline)
=== Code point 10
--- code: 10
--- yaml
"\n": "\n"


# 11 → \v "vertical tab"
=== Code point 11
--- code: 11
--- yaml
"\v": "\v"


# 11 → \f "form feed"
=== Code point 12
--- code: 12
--- yaml
"\f": "\f"


# 11 → \f "carriage return"
=== Code point 13
--- code: 13
--- yaml
"\r": "\r"

# 27 → \e "escape"
=== Code point 27
--- code: 27
--- yaml
"\e": "\e"


=== Code point 32
--- code: 32
--- yaml
' ': ' '


=== Code point 33
--- code: 33
--- yaml
'!': '!'


=== Code point 34
--- code: 34
--- yaml
'"': '"'


=== Code point 35
--- code: 35
--- yaml
'#': '#'


=== Code point 36
--- code: 36
--- yaml
$: $


=== Code point 37
--- code: 37
--- yaml
'%': '%'


=== Code point 38
--- code: 38
--- yaml
'&': '&'


=== Code point 39
--- code: 39
--- yaml
"'": "'"


=== Code point 40
--- code: 40
--- yaml
(: (


=== Code point 41
--- code: 41
--- yaml
): )


=== Code point 42
--- code: 42
--- yaml
'*': '*'


=== Code point 43
--- code: 43
--- yaml
+: +


=== Code point 44
--- code: 44
--- yaml
',': ','


=== Code point 45
--- code: 45
--- yaml
'-': '-'


=== Code point 46
--- code: 46
--- yaml
.: .


=== Code point 47
--- code: 47
--- yaml
/: /


=== Code point 48
--- code: 48
--- yaml
'0': '0'


=== Code point 49
--- code: 49
--- yaml
'1': '1'


=== Code point 50
--- code: 50
--- yaml
'2': '2'


=== Code point 51
--- code: 51
--- yaml
'3': '3'


=== Code point 52
--- code: 52
--- yaml
'4': '4'


=== Code point 53
--- code: 53
--- yaml
'5': '5'


=== Code point 54
--- code: 54
--- yaml
'6': '6'


=== Code point 55
--- code: 55
--- yaml
'7': '7'


=== Code point 56
--- code: 56
--- yaml
'8': '8'


=== Code point 57
--- code: 57
--- yaml
'9': '9'


=== Code point 58
--- code: 58
--- yaml
':': ':'


=== Code point 59
--- code: 59
--- yaml
;: ;


=== Code point 60
--- code: 60
--- yaml
<: <


=== Code point 61
--- code: 61
--- yaml
=: =


=== Code point 62
--- code: 62
--- yaml
'>': '>'


=== Code point 63
--- code: 63
--- yaml
'?': '?'


=== Code point 64
--- code: 64
--- yaml
'@': '@'


=== Code point 65
--- code: 65
--- yaml
A: A


=== Code point 66
--- code: 66
--- yaml
B: B


=== Code point 67
--- code: 67
--- yaml
C: C


=== Code point 68
--- code: 68
--- yaml
D: D


=== Code point 69
--- code: 69
--- yaml
E: E


=== Code point 70
--- code: 70
--- yaml
F: F


=== Code point 71
--- code: 71
--- yaml
G: G


=== Code point 72
--- code: 72
--- yaml
H: H


=== Code point 73
--- code: 73
--- yaml
I: I


=== Code point 74
--- code: 74
--- yaml
J: J


=== Code point 75
--- code: 75
--- yaml
K: K


=== Code point 76
--- code: 76
--- yaml
L: L


=== Code point 77
--- code: 77
--- yaml
M: M


=== Code point 78
--- code: 78
--- yaml
N: N


=== Code point 79
--- code: 79
--- yaml
O: O


=== Code point 80
--- code: 80
--- yaml
P: P


=== Code point 81
--- code: 81
--- yaml
Q: Q


=== Code point 82
--- code: 82
--- yaml
R: R


=== Code point 83
--- code: 83
--- yaml
S: S


=== Code point 84
--- code: 84
--- yaml
T: T


=== Code point 85
--- code: 85
--- yaml
U: U


=== Code point 86
--- code: 86
--- yaml
V: V


=== Code point 87
--- code: 87
--- yaml
W: W


=== Code point 88
--- code: 88
--- yaml
X: X


=== Code point 89
--- code: 89
--- yaml
Y: Y


=== Code point 90
--- code: 90
--- yaml
Z: Z


=== Code point 91
--- code: 91
--- yaml
'[': '['


=== Code point 92
--- SKIP
--- code: 92
--- yaml
\: \


=== Code point 93
--- code: 93
--- yaml
']': ']'


=== Code point 94
--- code: 94
--- yaml
^: ^


=== Code point 95
--- code: 95
--- yaml
_: _


=== Code point 96
--- code: 96
--- yaml
'`': '`'


=== Code point 97
--- code: 97
--- yaml
a: a


=== Code point 98
--- code: 98
--- yaml
b: b


=== Code point 99
--- code: 99
--- yaml
c: c


=== Code point 100
--- code: 100
--- yaml
d: d


=== Code point 101
--- code: 101
--- yaml
e: e


=== Code point 102
--- code: 102
--- yaml
f: f


=== Code point 103
--- code: 103
--- yaml
g: g


=== Code point 104
--- code: 104
--- yaml
h: h


=== Code point 105
--- code: 105
--- yaml
i: i


=== Code point 106
--- code: 106
--- yaml
j: j


=== Code point 107
--- code: 107
--- yaml
k: k


=== Code point 108
--- code: 108
--- yaml
l: l


=== Code point 109
--- code: 109
--- yaml
m: m


=== Code point 110
--- code: 110
--- yaml
n: n


=== Code point 111
--- code: 111
--- yaml
o: o


=== Code point 112
--- code: 112
--- yaml
p: p


=== Code point 113
--- code: 113
--- yaml
q: q


=== Code point 114
--- code: 114
--- yaml
r: r


=== Code point 115
--- code: 115
--- yaml
s: s


=== Code point 116
--- code: 116
--- yaml
t: t


=== Code point 117
--- code: 117
--- yaml
u: u


=== Code point 118
--- code: 118
--- yaml
v: v


=== Code point 119
--- code: 119
--- yaml
w: w


=== Code point 120
--- code: 120
--- yaml
x: x


=== Code point 121
--- code: 121
--- yaml
y: y


=== Code point 122
--- code: 122
--- yaml
z: z


=== Code point 123
--- code: 123
--- yaml
'{': '{'


=== Code point 124
--- code: 124
--- yaml
'|': '|'


=== Code point 125
--- code: 125
--- yaml
'}': '}'


=== Code point 126
--- code: 126
--- yaml
'~': '~'


# 127 → "escape"
# YAML does not have a special character. YAML2 should consider \?.
=== Code point 127
--- code: 127
--- yaml
"\x7F": "\x7F"


# 80-84,86-159 → \x##
=== Code point 128
--- code: 128
--- yaml
"\x80": "\x80"


# 133 (\x85) → "next line" (NEL)
=== Code point 133
--- code: 133
--- yaml
"\N": "\N"


# 160 (\xA0) → "non-breaking space"
# It seems extremely odd that YAML does not escape this.
# Investigate further.
=== Code point 160
--- SKIP
--- code: 160
--- yaml
 :  


# 161-… → From here on up use printable unicode chars.
# XXX Need to look into other special code blocks. Especially those known to
# libyaml.
=== Code point 161
--- code: 161
--- yaml
¡: ¡
